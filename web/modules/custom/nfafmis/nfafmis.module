<?php

/**
 * @file
 * Custom module.
 */

use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\views\ViewExecutable;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Ajax\RedirectCommand;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\CloseModalDialogCommand;

const RANGE = 'range';
const SECTOR = 'sector';

/**
 * Implements hook_form_alter().
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function nfafmis_form_alter(array &$form, FormStateInterface $form_state, $form_id) {

  // Propagate ?destination= from the request into the form action path, if
  // necessary.
  $affected_forms = [
    'node_farmer_details_form',
    'node_farmer_details_edit_form',
    'comment_comment_form',
    'node_offer_license_form',
    'node_offer_license_edit_form',
    'node_sub_area_form',
    'node_sub_area_edit_form',
    'node_inventory_form',
    'node_inventory_edit_form',
    'node_thinning_harvest_details_form',
    'node_thinning_harvest_details_edit_form',
    'node_charge_form',
    'node_charge_edit_form',
    'node_starting_amount_form',
    'node_starting_amount_edit_form',
    'node_historical_payments_form',
    'node_historical_payments_edit_form',
    'node_fee_payment_nfa_form',
    'node_fee_payment_nfa_edit_form',
  ];
  if (in_array($form_id, $affected_forms, TRUE)) {
    $request_destination = \Drupal::request()->query->get('destination');
    if (!empty($request_destination)) {
      $action_query = parse_url($form['#action'], PHP_URL_QUERY);
      parse_str((string) $action_query, $action_params);
      if (empty($action_params['destination'])) {
        if (strpos($form['#action'], 'form_action_p_') === 0) {
          $form_state->setRedirect($request_destination);
        }
        else {
          $action_path = parse_url($form['#action'], PHP_URL_PATH);
          $form['#action'] = $action_path . '?destination=' . urlencode($request_destination);
        }
      }
    }
  }

  // Create nfafmis service object.
  $nfafmis_service_utility = \Drupal::service('nfafmis_service.utility');
  $nfafmis_service_farmer = \Drupal::service('nfafmis_service.farmer');
  $entity_type_manager = \Drupal::entityTypeManager();

  if ($form_id === 'comment_comment_form') {
    $form['actions']['submit']['#submit'][] = 'nfafmis_comment_comment_form_submit';
  }

  // Hide exposed form from certain page only.
  if ($form_id == 'views_exposed_form') {
    $include_id = [
      'views-exposed-form-farmer-filter-block-1',
      'views-exposed-form-farmer-main-tab-page-4',
      'views-exposed-form-farmer-main-tab-page-5',
      'views-exposed-form-farmer-main-tab-page-6',
      'views-exposed-form-farmer-main-tab-page-7',
    ];
    if (in_array($form['#id'], $include_id)) {
      $form['#attributes']['class'] = ['hidden'];
    }
  }

  // Prepare offer license add edit form.
  if ($form_id == 'node_offer_license_form' || $form_id == 'node_offer_license_edit_form') {
    $form['field_license_id']['#states'] = [
      'visible' => [
        ':input[name="field_license_issued[value]"]' => ['checked' => TRUE],
      ],
    ];
    $form['field_license_date']['#states'] = [
      'visible' => [
        ':input[name="field_license_issued[value]"]' => ['checked' => TRUE],
      ],
    ];

    // Set default farmer when adding offer license content.
    $form['field_farmer_name_ref']['widget'][0]['#disabled'] = TRUE;
    if ($form_id == 'node_offer_license_form') {
      $query_params = $nfafmis_service_utility->getQueryParams();
      if (!empty($query_params) && isset($query_params['farmer_id'])) {
        $farmer_id = $query_params['farmer_id'];
        $farmer_data = $entity_type_manager->getStorage('node')->load($farmer_id);
        $form['field_farmer_name_ref']['widget'][0]['target_id']['#default_value'] = $farmer_data;
      }
    }
    $form['actions']['submit']['#submit'][] = 'nfafmis_node_offer_license_form_submit';
  }

  // Set default sub-area-id when adding Inventory/Harvest content.
  if ($form_id == 'node_inventory_form' || $form_id == 'node_thinning_harvest_details_form') {
    $query_params = $nfafmis_service_utility->getQueryParams();
    if (!empty($query_params) && isset($query_params['sub_area_id'])) {
      $form['field_sub_area_id']['widget'][0]['#disabled'] = TRUE;
      $sub_area_id = $query_params['sub_area_id'];
      $sub_area_data = $entity_type_manager->getStorage('node')->load($sub_area_id);
      $form['field_sub_area_id']['widget'][0]['target_id']['#default_value'] = $sub_area_data;
    }
  }

  // Prepare charge add edit form.
  if ($form_id == 'node_charge_form' || $form_id == 'node_charge_edit_form') {
    $query_params = $nfafmis_service_utility->getQueryParams();
    if (!empty($query_params) && isset($query_params['offer_licence_id'])) {
      $form['field_areas_id']['widget'][0]['#disabled'] = TRUE;
      $area_id = $query_params['offer_licence_id'];
      $area_data = $entity_type_manager->getStorage('node')->load($area_id);
      $form['field_areas_id']['widget'][0]['target_id']['#default_value'] = $area_data;

      $sub_areas = $nfafmis_service_farmer->getSubAreasIds($area_id);
      // Provide area-id as argument to get sub-area ids.
      if ($sub_areas) {
        $form['field_charges_sub_area']['widget'][0]['target_id']['#selection_settings']['view']['arguments'][] = $query_params['offer_licence_id'];
      }
      // Disabled field since there is no sub-area-is available.
      else {
        $form['field_charges_sub_area']['widget'][0]['target_id']['#placeholder'] = t('No sub-area found.');
        $form['field_charges_sub_area']['widget'][0]['#disabled'] = TRUE;
      }
    }

    if (!empty($query_params) && isset($query_params['farmer_id'])) {
      // Provide farmer id as arguments to the reference views to filter result.
      // This only works when widget is selected as autocomplete.
      $form['field_areas_id']['widget'][0]['target_id']['#selection_settings']['view']['arguments'][] = $query_params['farmer_id'];
    }

    $form['actions']['submit']['#submit'][] = 'nfafmis_node_charge_form_submit';
  }

  // Prepare fee_payment_nfa add edit form.
  if ($form_id == 'node_fee_payment_nfa_form' || $form_id == 'node_fee_payment_nfa_edit_form') {
    $query_params = $nfafmis_service_utility->getQueryParams();
    if (!empty($query_params) && isset($query_params['offer_licence_id'])) {
      $form['field_offer_id_ref']['widget'][0]['#disabled'] = TRUE;
      $area_id = $query_params['offer_licence_id'];
      $area_data = $entity_type_manager->getStorage('node')->load($area_id);
      $form['field_offer_id_ref']['widget'][0]['target_id']['#default_value'] = $area_data;
    }

    if (!empty($query_params) && isset($query_params['farmer_id'])) {
      $form['field_farmer_name_ref']['widget'][0]['#disabled'] = TRUE;
      $farmer_id = $query_params['farmer_id'];
      $farmer_data = $entity_type_manager->getStorage('node')->load($farmer_id);
      $form['field_farmer_name_ref']['widget'][0]['target_id']['#default_value'] = $farmer_data;

      // Provide farmer id as arguments to the reference views to filter result.
      // This only works when widget is selected as autocomplete.
      $form['field_offer_id_ref']['widget'][0]['target_id']['#selection_settings']['view']['arguments'][] = $farmer_id;
    }

    $form['actions']['submit']['#submit'][] = 'nfafmis_node_fee_payment_nfa_form_submit';
  }

  // Prepare sub_area add edit form.
  if ($form_id == 'node_sub_area_form' || $form_id == 'node_sub_area_edit_form') {
    // Provide farmer id as arguments to the reference views to filter result.
    // This only works when widget is selected as autocomplete.
    // Don't do this if we are here during an ajax callback, such as when a file
    // is being uploaded.
    if (!$form_state->getTriggeringElement()) {
      $farmer_id = $nfafmis_service_utility->getQueryParams();

      if (isset($farmer_id['farmer_id'])) {
        $form['field_areas_id']['widget'][0]['target_id']['#selection_settings']['view']['arguments'][] = $farmer_id['farmer_id'];
      }
    }
    $form['field_date_harvested']['#states'] = [
      'visible' => [
        ':input[name="field_area_harvested[value]"]' => ['checked' => TRUE],
      ],
    ];
  }

  // Prepare invoice add edit form.
  if ($form_id == 'node_invoice_form' || $form_id == 'node_invoice_edit_form') {
    // Set default farmer when adding offer license content.
    $form['field_invoice_number']['widget'][0]['#disabled'] = TRUE;
    $form['field_invoice_date']['widget'][0]['#disabled'] = TRUE;
    $form['field_amount']['widget'][0]['#disabled'] = TRUE;

    $query_params = $nfafmis_service_utility->getQueryParams();
    if (!empty($query_params['farmer_id'])) {
      $farmer = $entity_type_manager->getStorage('node')->load($query_params['farmer_id']);
      $form['field_farmer_name_ref']['widget'][0]['target_id']['#default_value'] = $farmer;

      // Hide farmer field and show information.
      $form['field_farmer_name_ref']['#access'] = FALSE;
      $form_object = $form_state->getFormObject();
      $entity = $form_object->getEntity();

      // Set default value for invoice number dynamically.
      if ($entity->isNew()) {
        $form['field_amount']['#access'] = FALSE;
        $form['field_invoice_number']['widget'][0]['value']['#default_value'] = 'Auto generated';
      }

      // Hide field_areas_id field based on field_invoice_details.
      $form['field_areas_id']['#states'] = [
        'invisible' => [
          [
            [':input[name="field_invoice_details"]' => ['value' => '_none']],
          ],
        ],
      ];
      // Provide farmer id as arguments to the reference views to filter result.
      // This only works when widget is selected as autocomplete.
      $form['field_areas_id']['widget'][0]['target_id']['#selection_settings']['view']['arguments'][] = $query_params['farmer_id'];

      // Create farmer information container to show on invoice add page.
      $form['farmer_information'] = nfafmis_create_farmer_information_container($farmer);

      // Add ajax feature of area select autocomplete on add invoice page.
      $form['field_areas_id']['widget'][0]['target_id']['#attributes'] = ['placeholder' => t('AREA/123456')];
      $form['field_areas_id']['widget'][0]['target_id']['#ajax'] = [
        'callback' => 'get_area_details_ajax_callback',
        'event' => 'autocompleteclose',
        'progress' => [
          'type' => 'throbber',
          'message' => t('Fetching area data..'),
        ],
      ];

      // Add ajax feature for field_invoice_details on add invoice page.
      $form['field_invoice_details']['widget']['#ajax'] = [
        'callback' => 'get_area_details_ajax_callback',
        'event' => 'change',
        'progress' => [
          'type' => 'throbber',
          'message' => t('Updating are data..'),
        ],
      ];

      // Area information on add invoice page.
      $form['farmer_area_information'] = [
        '#type' => "container",
        '#theme' => 'section__area_information',
        '#weight' => 20,
      ];
      // Add above created wrapper to the field group on invoice add page.
      $form['#fieldgroups']['group_tree_farmer_details']->children[] = 'farmer_information';
      $form['#fieldgroups']['group_invoice_details']->children[] = 'farmer_area_information';
    }
    else {
      // Set error message if farmer id not available in the param.
    }
  }

  // Prepare payment add edit form.
  if ($form_id == 'node_payment_form' || $form_id == 'node_payment_edit_form') {
    $form['field_date_paid']['widget'][0]['#disabled'] = TRUE;
    $form['field_invoice']['widget'][0]['#disabled'] = TRUE;
    $form['field_receipt_number']['widget'][0]['#disabled'] = TRUE;

    // Set default for field_receipt_number.
    $time = Drupal::time()->getCurrentTime();
    $form['field_receipt_number']['widget'][0]['value']['#default_value'] = $time;

    // Set default farmer when adding offer license content.
    $invoice_id = \Drupal::request()->query->get('invoice_id');
    if ($invoice_id) {
      $node_invoice = $entity_type_manager->getStorage('node')->load($invoice_id);
      $farmer_id = $node_invoice->get('field_farmer_name_ref')->target_id;
      $farmer = $entity_type_manager->getStorage('node')->load($farmer_id);
      $form['field_farmer_name_ref']['widget'][0]['target_id']['#default_value'] = $farmer;
      $form['field_invoice']['widget'][0]['target_id']['#default_value'] = $node_invoice;

      // Hide farmer field and show information.
      $form['field_farmer_name_ref']['#access'] = FALSE;
      $form_object = $form_state->getFormObject();
      $entity = $form_object->getEntity();

      // Provide farmer id as arguments to the reference views to filter result.
      // This only works when widget is selected as auto-complete.
      $form['field_invoice']['widget'][0]['target_id']['#selection_settings']['view']['arguments'][] = $farmer_id;

      // Create farmer information container to show on payment add page.
      $form['farmer_information'] = nfafmis_create_farmer_information_container($farmer);

      // Add Ajax feature of area select autocomplete on add payment page.
      $form['field_invoice']['widget'][0]['target_id']['#attributes'] = ['placeholder' => t('I687889324')];
      $form['field_invoice']['widget'][0]['target_id']['#ajax'] = [
        'callback' => 'get_area_details_for_payment_ajax_callback',
        'event' => 'autocompleteclose',
        'progress' => [
          'type' => 'throbber',
          'message' => t('Fetching area data..'),
        ],
      ];

      // Area information on add payment page.
      $form['farmer_area_information'] = [
        '#type' => "container",
        '#theme' => 'section__area_information_payment',
        '#weight' => 20,
      ];
      // Add above created wrapper to the field group on payment add page.
      $form['#fieldgroups']['group_tree_farmer_details']->children[] = 'farmer_information';
      $form['#fieldgroups']['group_receipt_details']->children[] = 'farmer_area_information';
    }
    nfafmis_add_ajax_form($form);
  }

  // Prepare starting amount add edit form.
  if ($form_id == 'node_starting_amount_form' || $form_id == 'node_starting_amount_edit_form') {
    $form['field_areas_id']['widget'][0]['#disabled'] = TRUE;

    // Set default farmer when adding offer license content.
    $query_params = $nfafmis_service_utility->getQueryParams();
    if (!empty($query_params['offer_licence_id'])) {
      $node_area = $entity_type_manager->getStorage('node')->load($query_params['offer_licence_id']);
      $form['field_areas_id']['widget'][0]['target_id']['#default_value'] = $node_area;
    }
  }

  // Set default area-id when adding Historical payments content.
  if ($form_id == 'node_historical_payments_form' || $form_id == 'node_historical_payments_edit_form') {
    $query_params = $nfafmis_service_utility->getQueryParams();
    $form['field_areas_id']['widget'][0]['#disabled'] = TRUE;
    if (!empty($query_params) && isset($query_params['offer_licence_id'])) {
      $area_id = $query_params['offer_licence_id'];
      $area_data = $entity_type_manager->getStorage('node')->load($area_id);
      $form['field_areas_id']['widget'][0]['target_id']['#default_value'] = $area_data;
    }
  }
}

/**
 * Create farmer information container.
 *
 * @param \Drupal\node\Entity\Node $farmer
 *
 * @return array
 */
function nfafmis_create_farmer_information_container(Node $farmer) {
  return [
    '#type' => "container",
    '#theme' => 'section__farmer_information',
    '#farmer_data' => [
      'name' => $farmer->get('title')->value,
      'field_email' => $farmer->get('field_email')->value,
      'field_phone_number' => $farmer->get('field_phone_number')->value,
      'field_physical_address' => $farmer->get('field_physical_address')->value,
      'field_postal_address' => $farmer->get('field_postal_address')->value,
      'field_tax_identification_number' => $farmer->get('field_tax_identification_number')->value,
      'field_national_identification_no' => $farmer->get('field_national_identification_no')->value,
    ],
  ];
}

/**
 * Implements hook_node_presave().
 *
 * @param \Drupal\node\Entity\Node $node
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 * @throws Exception
 */
function nfafmis_node_presave(Node $node) {
  // Generate area number like: AREA/XXXXXXX.
  if ($node->isNew() && $node->bundle() == 'offer_license') {
    $area_serial_number = $node->get('field_area_serial_number')->value;
    $node->field_area_number->value = 'AREA/' . sprintf("%06d", $area_serial_number);
  }
  // Generate field invoice number like: 01032020-0001.
  if ($node->isNew() && $node->bundle() == 'invoice') {
    $default_timezone = new \DateTimeZone(date_default_timezone_get());
    $date = new \DateTime('now', $default_timezone);
    $invoice_serial = $node->get('field_invoice_serial')->value;
    $field_invoice_serial = $date->format('dmY') . '-' . sprintf("%04d", $invoice_serial);
    $node->field_invoice_number->value = $field_invoice_serial;
    $node->title->value = 'Payment Advice -' . $field_invoice_serial;
  }

  // Auto calculate balance & arrears amount while adding historical payments.
  if ($node->isNew() && $node->bundle() == 'historical_payments') {
    $field_areas_id = $node->get('field_areas_id')->target_id;
    $field_charge_amount = $node->get('field_charge_amount')->value;
    $field_amount_paid_as = $node->get('field_amount_paid_as')->value;
    $field_balance = $field_charge_amount - $field_amount_paid_as;
    $node->field_balance->value = $field_balance;

    if ($field_areas_id) {
      $nfafmis_service_farmer = \Drupal::service('nfafmis_service.farmer');
      $arrears = $nfafmis_service_farmer->getArrears($field_areas_id);
      // Set balance as arrears for starting entry.
      if ($arrears === 'starting_entry') {
        $node->field_arrears->value = $field_balance;
      }
      else {
        $node->field_arrears->value = $field_balance + $arrears;
      }
    }
  }

  // Automatically generate invoice automatically for each charges,
  // starting_amount & annual_charges.
  $allowed_bundle = ['charge', 'starting_amount', 'annual_charges'];
  $field_invoice_details = [
    'charge' => '1',
    'annual_charges' => '2',
    'starting_amount' => '3',
  ];
  if (in_array($node->bundle(), $allowed_bundle) && $node->isNew()) {
    if ($node->bundle() === 'annual_charges') {
      $field_amount = $node->get('field_annual_charges')->value;
      $area = $node->get('field_licence_id_ref')->referencedEntities()[0];
    }
    else {
      $field_amount = $node->get('field_amount')->value;
      $area = $node->get('field_areas_id')->referencedEntities()[0];
    }
    $farmer_id = $area->get('field_farmer_name_ref')->target_id;
    $default_timezone = new \DateTimeZone(date_default_timezone_get());
    $date = new \DateTime('now', $default_timezone);
    // Create Invoice(Payment Advice) for every $allowed_bundle automatically.
    $node_invoice = \Drupal::entityTypeManager()->getStorage('node')->create([
      'type' => 'invoice',
      'field_amount' => $field_amount,
      'field_areas_id' => ['target_id' => $area->id()],
      'field_invoice_date' => $date->format('Y-m-d'),
      'field_invoice_details' => $field_invoice_details[$node->bundle()],
      'field_farmer_name_ref' => ['target_id' => $farmer_id],
    ]);
    $node_invoice->save();
    // Update charges field_payment_advice.
    $node->field_payment_advice->target_id = $node_invoice->id();
  }
}

/**
 * Get area details for payment using ajax. @TODO: remove below code.
 *
 * @param $form_state
 *
 * @return \Drupal\Core\Ajax\AjaxResponse
 */
function get_area_details_for_payment_ajax_callback(&$form_state) {
  $ajax_response = new AjaxResponse();
  $field_invoice = $form_state->getValue('field_invoice')[0]['target_id'];
  if ($field_invoice) {
    $nfafmis_service_farmer = \Drupal::service('nfafmis_service.farmer');
    $area_data = $nfafmis_service_farmer->getInvoiceDetails($field_invoice);
    $element = [
      '#type' => "container",
      '#theme' => 'section__area_information_payment',
      '#weight' => 20,
      '#area_data' => $area_data,
    ];
    $rendered_data = \Drupal::service('renderer')->render($element);
  }
  else {
    $rendered_data = [];
  }
  $ajax_response->addCommand(new HtmlCommand('#farmer-area-details', $rendered_data));
  return $ajax_response;
}

/**
 * Get area details using Ajax call.
 *
 * @param $form_state
 *
 * @return \Drupal\Core\Ajax\AjaxResponse
 */
function get_area_details_ajax_callback(&$form_state) {
  $ajax_response = new AjaxResponse();
  $field_areas_id = $form_state->getValue('field_areas_id')[0]['target_id'];
  $field_invoice_for = $form_state->getValue('field_invoice_details')[0]['value'];
  if ($field_areas_id && $field_invoice_for) {
    $nfafmis_service_farmer = \Drupal::service('nfafmis_service.farmer');
    $area_data = $nfafmis_service_farmer->getOtherCharges($field_areas_id, $field_invoice_for);
    $element = [
      '#type' => "container",
      '#theme' => 'section__area_information',
      '#weight' => 20,
      '#area_data' => $area_data,
    ];
    $rendered_data = \Drupal::service('renderer')->render($element);
  }
  else {
    $rendered_data = [];
  }
  $ajax_response->addCommand(new HtmlCommand('#farmer-area-details', $rendered_data));
  return $ajax_response;
}

/**
 * Implements hook_preprocess_views_view_field().
 *
 * @param $variables
 */
function nfafmis_preprocess_views_view_field(&$variables) {
  // Create nfafmis service object.
  $nfafmis_service_farmer = \Drupal::service('nfafmis_service.farmer');

  $view = $variables['view'];
  $field = $variables['field'];
  $row = $variables['row'];
  if ($view->storage->id() == 'sub_areas_planting_status' && $view->current_display == 'block_1') {
    $field_overall_area_allocated = $row->_entity->get('field_overall_area')->value;
    $area_planted_values = $nfafmis_service_farmer->getAreaPlantedUnPlantedValue($row->nid);

    // Override the views field result output to show custom value.
    if ($field->field == 'field_area_serial_number') {
      $variables['output'] = $area_planted_values . 'ha';
    }
    if ($field->field == 'title') {
      $variables['output'] = $field_overall_area_allocated - $area_planted_values . 'ha';
    }
  }

  // Preprocess views view field_purpose to show AREA/XXXXXXXX Tab.
  if ($view->storage->id() == 'accounts_tab' && $view->current_display == 'block_1') {
    $farmer_id = $view->args[0];
    $offer_licence_id = $row->nid;
    if ($field->field == 'field_purpose') {
      $variables['output'] = $nfafmis_service_farmer->getAreaLandRentAndFeesData($farmer_id, $offer_licence_id);;
    }
  }

  // Preprocess views view field_physical_address to show SUMMARY-CHARGES Tab.
  if ($view->storage->id() == 'farmer_main_tab' && $view->current_display == 'page_6' && !empty($view->exposed_data['title'])) {
    $farmer_id = $row->nid;
    if ($field->field == 'field_physical_address') {
      $variables['output'] = $nfafmis_service_farmer->getSummaryChargesData($farmer_id);
    }
    // Preprocess views view field_postal_address to show PAYMENTS Tab.
    if ($field->field == 'field_postal_address') {
      $variables['output'] = $nfafmis_service_farmer->getPaymentsData($farmer_id);
    }
  }
}

/**
 * Implements hook_views_pre_view().
 *
 * @param \Drupal\views\ViewExecutable $view
 * @param $display_id
 * @param array $args
 */
function nfafmis_views_pre_view(ViewExecutable $view, $display_id, array &$args) {

  if ($view->id() == 'farmer_filter') {
    $view->element['#attached']['library'][] = 'nfafmis/nfafmis';
  }

  // When the farmer views are loaded with no farmer name the view returns
  // the most recently added farmer. To avoid this set the title exposed filter
  // explicitly to an so that the view has no results.
  if ($view->id() == 'farmer_filter' || $view->id() == 'farmer_main_tab') {
    if (empty($view->getExposedInput()['title'])) {
      // Set title to an invalid value so that no results are returned.
      $view->setExposedInput(['title' => 'NORESULTS']);
    }
  }

  // Create nfafmis service object.
  $nfafmis_service_farmer = \Drupal::service('nfafmis_service.farmer');

  // Set Offer license IDs as view arguments.
  if ($view->id() == 'sub_areas_planting_status' &&
    ($display_id == 'block_4' || $display_id == 'block_6' || $display_id == 'block_8')) {
    // We have pass farmer Id intentionally to get offer license ID from that.
    if (!empty($args) && !empty($args[0])) {
      $offer_license_ids = $nfafmis_service_farmer->getOfferLicenseIds($args[0]);
      if ($offer_license_ids) {
        $args = [$offer_license_ids];
      }
    }
    else {
      $args = [0];
    }
  }

  // Set argument for Inventory.
  if ($view->id() == 'sub_areas_planting_status' &&
    ($display_id == 'block_2' || $display_id == 'block_3')) {
    // We have pass farmer Id intentionally to get offer license ID from that.
    if (!empty($args) && !(empty($args[0]))) {
      $offer_license_ids = $nfafmis_service_farmer->getOfferLicenseIds($args[0]);
      // Now get all sub-area ids based on area(offer license).
      if ($offer_license_ids) {
        $sub_areas_ids = $nfafmis_service_farmer->getSubAreasIds($offer_license_ids);
        // Pass sub-area ids to get Inventory.
        if ($sub_areas_ids) {
          $args = [$sub_areas_ids];
        }
      }
    }
    else {
      $args = [0];
    }
  }
}

/**
 * Implements hook_theme().
 *
 * @return array[]
 */
function nfafmis_theme() {
  return [
    'tab__accounts__area__land_rent_fees_data' => [
      'variables' => [
        'data' => NULL,
      ],
      'template' => 'tab/accounts/tab--accounts--area--land-rent-fees-data',
    ],
    'tab__accounts__summary_charges_data' => [
      'variables' => [
        'data' => NULL,
      ],
      'template' => 'tab/accounts/tab--accounts--summary-charges-data',
    ],
    'tab__accounts__payments_data' => [
      'variables' => [
        'data' => NULL,
      ],
      'template' => 'tab/accounts/tab--accounts--payments-data',
    ],
    'section__farmer_information' => [
      'variables' => [
        'farmer_data' => NULL,
      ],
      'template' => 'section/section--farmer-information',
    ],
    'section__area_information' => [
      'variables' => [
        'area_data' => NULL,
      ],
      'template' => 'section/section--area-information',
    ],
    'section__area_information_payment' => [
      'variables' => [
        'area_data' => NULL,
      ],
      'template' => 'section/section--area-information-payment',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK() for tab__accounts__area__land_rent_fees_data().
 */
function nfafmis_preprocess_tab__accounts__area__land_rent_fees_data(&$variables) {
  $variables['title_query_param'] = (string) \Drupal::request()->query->get('title');
}

/**
 * Submit handler for comment form.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function nfafmis_comment_comment_form_submit($form, FormStateInterface &$form_state) {
  $url = Url::fromUri('internal:/tree-farmer-overview');
  $form_state->setRedirectUrl($url);
}

/**
 * Submit handler for node_offer_license form.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function nfafmis_node_offer_license_form_submit($form, FormStateInterface $form_state) {
  $nfafmis_service_utility = \Drupal::service('nfafmis_service.utility');
  $url = Url::fromUri('internal:/tree-farmer-overview/licences');
  $response_data = $nfafmis_service_utility->getReferrerAndQueryParams();
  if (!empty($response_data)) {
    if (isset($response_data['alias'])) {
      $url = Url::fromUri('internal:' . $response_data['alias']);
    }
  }
  $form_state->setRedirectUrl($url);
}

/**
 * Submit handler for node_charge form.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function nfafmis_node_charge_form_submit($form, FormStateInterface &$form_state) {
  $url = Url::fromUri('internal:/tree-farmer-overview/accounts');
  $form_state->setRedirectUrl($url);
}

/**
 * Submit handler for node_fee_payment_nfa form.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function nfafmis_node_fee_payment_nfa_form_submit($form, FormStateInterface &$form_state) {
  $url = Url::fromUri('internal:/tree-farmer-overview/accounts');
  $form_state->setRedirectUrl($url);
}

/**
 * Implements hook_field_field_amount_due_compute().
 *
 * @param $entity
 *
 * @return mixed
 */
function computed_field_field_amount_due_compute($entity_type_manager, $entity, $fields, $delta) {
  return ($entity->field_assessment_amount->value - $entity->field_amount_paid_as->value);
}

/**
 * Implements hook_token_info_alter().
 *
 * This adds the missing token info for automatically detected tokens.
 *
 * @param $info
 */
function nfafmis_token_info_alter(&$info) {
  $entities = \Drupal::service('entity_field.manager')->getFieldMap();
  foreach ($entities as $entity_key => $entity) {
    if ($entity_key !== 'node') {
      continue;
    }
    foreach ($entity as $field_key => $field) {
      if ($field['type'] !== 'yearonly') {
        continue;
      }
      $token_key = sprintf('node-%s', $field_key);
      $info['tokens'][$token_key]['value'] = [
        'name' => t('Year Only'),
        'description' => t('Year only value.'),
      ];
    }
  }
}

/**
 * Add Ajax handler on add payment page.
 *
 * @param $form
 *
 * @return mixed
 */
function nfafmis_add_ajax_form(&$form) {

  $form['#prefix'] = '<div id="modal-form">';
  $form['#suffix'] = '</div>';
  $form['messages'] = [
    '#weight' => -9999,
    '#type' => 'status_messages',
  ];

  $form['actions']['submit']['#ajax'] = [
    'callback' => 'nfafmis_form_ajax_validate',
    'wrapper' => 'modal-form',
    'progress' => [
      'type' => 'throbber',
      'message' => t('Saving...'),
    ],
  ];
  $form['#attached']['library'][] = 'core/drupal.dialog.ajax';
  return $form;
}

/**
 * Handle errors in the modal.
 *
 * @param array $form
 *   The form passed by reference.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @return \Symfony\Component\HttpFoundation\Response
 *   The response object.
 */
function nfafmis_form_ajax_validate(array &$form, FormStateInterface $form_state) {
  $response = new AjaxResponse();

  if (!empty($form_state->getErrors())) {
    $response->addCommand(new ReplaceCommand('#modal-form', $form));
    return $response;
  }
  $response->addCommand(new CloseModalDialogCommand());
  $response->addCommand(new RedirectCommand(\Drupal::request()->query->get('destination')));
  $form_state->setResponse($response);
  return $response;
}

/**
 * Implements hook_form_FORM_ID_alter() on behalf of 'user_form'.
 */
function nfafmis_form_user_form_alter(array &$form, FormStateInterface $form_state) {
  // Show the Management unit/Range field for Range users only.
  $form['management_unit']['#states'] = [
    'visible' => [
      [':input[name="roles[range_user]"]' => ['checked' => TRUE]],
      [':input[name="roles[range_power_user]"]' => ['checked' => TRUE]],
    ],
  ];
  $form['management_unit']['widget']['0']['target_id']['#states'] = [
    'required' => [
      [':input[name="roles[range_user]"]' => ['checked' => TRUE]],
      [':input[name="roles[range_power_user]"]' => ['checked' => TRUE]],
    ],
  ];

  // Show the Sector field for Sector users only.
  $form['sector']['#states'] = [
    'visible' => [
      [':input[name="roles[sector_user]"]' => ['checked' => TRUE]],
      [':input[name="roles[sector_power_user]"]' => ['checked' => TRUE]],
    ],
  ];
  $form['sector']['widget']['0']['target_id']['#states'] = [
    'required' => [
      [':input[name="roles[sector_user]"]' => ['checked' => TRUE]],
      [':input[name="roles[sector_power_user]"]' => ['checked' => TRUE]],
    ],
  ];

  if (!\Drupal::currentUser()->hasPermission('administer users')) {
    $form['management_unit']['#disabled'] = 'disabled';
    $form['sector']['#disabled'] = 'disabled';
  }
}

/**
 * Implements hook_node_access_records().
 */
function nfafmis_node_access_records(NodeInterface $node) {
  $grants = [];

  $bundles = ['farmer_details', 'offer_license', 'sub_area'];
  if (!in_array($node->bundle(), $bundles) || !$node->isPublished()) {
    // Access to other content types will be determined by standard permissions.
    return $grants;
  }

  /** @var \Drupal\Core\Config\Entity\ConfigEntityStorage $entity_storage */
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  $range = NULL;
  $sector = NULL;

  if ($node->bundle() == 'farmer_details') {
    // Retrieve the Areas that the farmer has allocations in, and from there the
    // CFRs and Ranges (Management Unit) that the area is in.
    // Load Sub area nodes ids.
    $nids = $node_storage->getQuery()
      ->condition('type', 'offer_license')
      ->condition('field_farmer_name_ref', $node->id())
      ->condition('status', NodeInterface::PUBLISHED)
      ->accessCheck(FALSE)
      ->execute();
    $areas = $node_storage->loadMultiple($nids);

    foreach ($areas as $area) {
      $range = $area->field_central_forest_reserve->entity->management_unit->entity;
      // Range Users are granted 'view' permission to nodes in their range.
      // Since a farmer can have more than one area in a range we have to avoid
      // adding duplicate realm+gid records. We do that by using the range id as
      // the $grants array key.
      if ($range) {
        $grants[$range->id()] = [
          'realm' => nfafmis_access_realm($range, RANGE),
          'gid' => $range->id(),
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
        ];
        // Range Power Users are granted all permissions to nodes in their range.
        // Because we're using the range id as the array key we need to create
        // a second unique array key for the power user grants. We add 10000 to
        // the range id to achieve this. There are 15 ranges and it is unlikely
        // that more will be added, so while 10000 is an arbitrary choice ,it
        // serves the purpose.
        $grants[$range->id() + 10000] = [
          'realm' => nfafmis_access_realm($range, RANGE, TRUE),
          'gid' => $range->id(),
          'grant_view' => 1,
          'grant_update' => 1,
          'grant_delete' => 1,
        ];
      }
      $sector = $area->field_central_forest_reserve->entity->sector->entity;
      // Sector Users are granted 'view' permission to nodes in their sector.
      // Since a farmer can have more than one area in a sector we have to avoid
      // adding duplicate realm+gid records. We do that by using the sector id
      // as the $grants array key.
      if ($sector) {
        $grants[$sector->id()] = [
          'realm' => nfafmis_access_realm($sector, SECTOR),
          'gid' => $sector->id(),
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
        ];
        // Sector Users are granted all permissions to nodes in their sector.
        // Because we're using the sector id as the array key we need to create
        // a second unique array key for the power user grants. We add 10000 to
        // the sector id to achieve this. There are around 50 sectors and it is
        // unlikely that more will be added, so while 10000 is an arbitrary
        // choice , it serves the purpose.
        $grants[$sector->id() + 10000] = [
          'realm' => nfafmis_access_realm($sector, SECTOR, TRUE),
          'gid' => $sector->id(),
          'grant_view' => 1,
          'grant_update' => 1,
          'grant_delete' => 1,
        ];
      }
    }
  }
  else {
    if ($node->bundle() == 'offer_license') {
      // Retrieve the Sector and Range (Management Unit) that the area is in.
      $range = $node->field_central_forest_reserve->entity->management_unit->entity;
      $sector = $node->field_central_forest_reserve->entity->sector->entity;
    }
    elseif ($node->bundle() == 'sub_area') {
      // Retrieve the CFR and Range (Management Unit) that the sub-area's parent
      // area is in.
      if ($node->field_areas_id->entity && $cfr = $node->field_areas_id->entity->field_central_forest_reserve->entity) {
        $range = $cfr->management_unit->entity;
        $sector = $cfr->sector->entity;
      }
      else {
        Drupal::logger('NFA-FMIS')
          ->warning('Sub-area with nid @id has no assigned area', ['@id' => $node->id()]);
      }
    }

    if ($range) {
      // Range Users are granted 'view' permission to nodes in their range.
      $grants[] = [
        'realm' => nfafmis_access_realm($range, RANGE),
        'gid' => $range->id(),
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
      ];
      // Range Power Users are granted all permissions to nodes in their range.
      $grants[] = [
        'realm' => nfafmis_access_realm($range, RANGE, TRUE),
        'gid' => $range->id(),
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
      ];
    }
    if ($sector) {
      // Sector Users are granted 'view' permission to nodes in their sector.
      $grants[] = [
        'realm' => nfafmis_access_realm($sector, SECTOR),
        'gid' => $sector->id(),
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
      ];
      // Sector Power Users are granted all permissions to nodes in their sector.
      $grants[] = [
        'realm' => nfafmis_access_realm($sector, SECTOR, TRUE),
        'gid' => $sector->id(),
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
      ];
    }
  }

  // HQ Users are granted view permissions to all nodes.
  $grants[] = [
    'realm' => 'nfafmis_view',
    'gid' => 1,
    'grant_view' => 1,
    'grant_update' => 0,
    'grant_delete' => 0,
  ];

  // HQ Power Users are granted all permissions to all nodes.
  $grants[] = [
    'realm' => 'nfafmis_all',
    'gid' => 1,
    'grant_view' => 1,
    'grant_update' => 1,
    'grant_delete' => 1,
  ];

  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function nfafmis_node_grants(AccountInterface $account, $op) {
  $grants = [];
  $roles = $account->getRoles();

  // If the user does not have permission to access all management units,
  // retrieve the range that the user has been assigned to.
  if (!$account->hasPermission('access all management unit content') && !$account->hasPermission('edit all management unit content')) {
    $nfafmis_service_utility = \Drupal::service('nfafmis_service.utility');
    $range = $nfafmis_service_utility->getUserManagementUnit();
    $sector = $nfafmis_service_utility->getUserSector();

    if ($range) {
      if (in_array('range_user', $roles)) {
        $grants[nfafmis_access_realm($range, RANGE)] = [
          'gid' => $range->id(),
        ];
      }
      if (in_array('range_power_user', $roles)) {
        $grants[nfafmis_access_realm($range, RANGE, TRUE)] = [
          'gid' => $range->id(),
        ];
      }
    }

    if ($sector) {
      if (in_array('sector_user', $roles)) {
        $grants[nfafmis_access_realm($sector, SECTOR)] = [
          'gid' => $sector->id(),
        ];
      }
      if (in_array('sector_power_user', $roles)) {
        $grants[nfafmis_access_realm($sector, SECTOR, TRUE)] = [
          'gid' => $sector->id(),
        ];
      }
    }
  }

  // Set grants for users with read access to all management units.
  if ($account->hasPermission('access all management unit content')) {
    $grants['nfafmis_view'] = [
      'gid' => 1,
    ];
  }

  // Set grants for users with full access to all management units.
  if ($account->hasPermission('edit all management unit content')) {
    $grants['nfafmis_all'] = [
      'gid' => 1,
    ];
  }

  if (count($grants)) {
    return $grants;
  }
}

/**
 * Return the node access realm for the management unit/range/sector.
 */
function nfafmis_access_realm($entity, $type, $power_user = FALSE) {
  $realm = "nfafmis_{$type}_" . str_replace(' ', '_', strtolower($entity->label()));
  if ($power_user) {
    return $realm . '_power';
  }
  else {
    return $realm;
  }
}

/**
 * Computed Field hooks for legacy computed field whose values used to be
 * computed in config but now must be provided by a hook.
 */

/**
 * Compute the Total Fee for the Fee paragragh type.
 */
function  computed_field_field_fee_total_compute($entity_type_manager, $entity, $fields, $delta) {
  return $entity->field_fee_unit_cost->value * $entity->field_fee_unit_number->value;;
}

/**
 * Implements hook_entity_type_alter().
 *
 * @param array $entity_types
 */
function nfafmis_entity_type_alter(array &$entity_types) {
  // Add validation constraint to the land rent rate entity
  $entity_types['node']->addConstraint('LandRentRateConstraint');
}
