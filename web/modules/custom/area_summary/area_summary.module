<?php

/**
 * @file
 * Primary module hooks for area summary module.
 */

use Drupal\area_summary\Entity\AreaSummary;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function area_summary_node_update(EntityInterface $entity) {
  if ($entity->bundle() == 'offer_license') {
    // If a summary already exists for the area update it, otherwise create one.
    $results = Drupal::entityQuery('area_summary')
      ->condition('area', $entity->id())
      ->accessCheck(FALSE)
      ->execute();

    if ($results) {
      foreach ($results as $id) {
        $summary = \Drupal::entityTypeManager()
          ->getStorage('area_summary')
          ->load($id);
        $summary->area_allocated = $entity->get('field_overall_area')->value;
        $summary->save();
      }
    }
    else {
      $farmer = $entity->field_farmer_name_ref->entity;
      $cfr = $entity->field_central_forest_reserve->entity;
      $management_unit = $cfr->management_unit->entity;
      $summary = AreaSummary::create([
        'area' => $entity->id(),
        'farmer' => $farmer->id(),
        'cfr' => $cfr->id(),
        'management_unit' => $management_unit->id(),
        'area_allocated' => $entity->field_overall_area,
      ]);
      $summary->save();
    }
  }
  elseif ($entity->bundle() == 'sub_area') {
    // Sum the area planted values for all sub areas of the parent area.
    $area = $entity->field_areas_id->entity;
    _area_summary_update_area_planted($area);
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function area_summary_node_delete(EntityInterface $entity) {
  if ($entity->bundle() == 'offer_license') {
    // Delete the summary record for the deleted area.
    $result = Drupal::entityQuery('area_summary')
      ->condition('area', $entity->id())
      ->accessCheck(FALSE)
      ->execute();

    $storage_handler = \Drupal::entityTypeManager()->getStorage("area_summary");
    $entities = $storage_handler->loadMultiple($result);
    $storage_handler->delete($entities);
  }
  elseif ($entity->bundle() == 'sub_area') {
    // Recalculate the area planted total after the sub area was deleted.
    $area = $entity->field_areas_id->entity;
    _area_summary_update_area_planted($area);
  }
}

/**
 * Calculate
 */
function _area_summary_update_area_planted(EntityInterface $area) {
  // Calculate the total area planted in sub-areas.
  $sub_nids = Drupal::entityQuery('node')
    ->condition('type', 'sub_area')
    ->condition('field_areas_id', $area->id())
    ->accessCheck(FALSE)
    ->execute();

  $sub_area_storage = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($sub_nids);
  $area_planted = 0;
  foreach ($sub_area_storage as $sub_area) {
    $area_planted += $sub_area->get('field_subarea_planted')->value;
  }

  // A summary should already exist for the area so update it.
  $results = Drupal::entityQuery('area_summary')
    ->condition('area', $area->id())
    ->accessCheck(FALSE)
    ->execute();

  foreach ($results as $id) {
    /** @var Drupal\area_summary\Entity\AreaSummary $summary */
    $summary = \Drupal::entityTypeManager()->getStorage('area_summary')->load($id);
    $summary->setAreaPlanted($area_planted);
    $summary->save();
  }
}
