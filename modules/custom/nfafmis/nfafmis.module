<?php

/**
 * @file
 * Custom module.
 */

use Drupal\Core\Url;
use Drupal\views\ViewExecutable;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter().
 */
function nfafmis_form_alter(array &$form, FormStateInterface $form_state, $form_id) {

  // Create nfafmis service object.
  $nfafmis_service_utility = \Drupal::service('nfafmis_service.utility');
  $nfafmis_service_farmer = \Drupal::service('nfafmis_service.farmer');

  if ($form_id === 'comment_comment_form') {
    $form['actions']['submit']['#submit'][] = 'nfafmis_comment_comment_form_submit';
  }

  // Hide exposed form from certain page only.
  if ($form_id == 'views_exposed_form') {
    $include_id = [
      'views-exposed-form-farmer-filter-block-1',
      'views-exposed-form-farmer-main-tab-page-4',
      'views-exposed-form-farmer-main-tab-page-5',
      'views-exposed-form-farmer-main-tab-page-6',
      'views-exposed-form-farmer-main-tab-page-7',
    ];
    if (in_array($form['#id'], $include_id)) {
      $form['#attributes']['class'] = ['hidden'];
    }
  }

  if ($form_id == 'node_offer_license_form' || $form_id == 'node_offer_license__edit_form') {
    $form['field_license_id']['#states'] = [
      'visible' => [
        ':input[name="field_license_issued[value]"]' => ['checked' => TRUE],
      ],
    ];
    $form['field_license_date']['#states'] = [
      'visible' => [
        ':input[name="field_license_issued[value]"]' => ['checked' => TRUE],
      ],
    ];

    // Set default farmer when adding offer license content.
    $form['field_farmer_name_ref']['widget'][0]['#disabled'] = TRUE;
    if ($form_id == 'node_offer_license_form') {
      $query_params = $nfafmis_service_utility->getQueryParams();
      if (!empty($query_params) && isset($query_params['farmer_id'])) {
        $farmer_id = $query_params['farmer_id'];
        $farmer_data = \Drupal::entityTypeManager()->getStorage('node')->load($farmer_id);
        $form['field_farmer_name_ref']['widget'][0]['target_id']['#default_value'] = $farmer_data;
      }
    }
    $form['#validate'][] = 'nfafmis_node_offer_license_form_validate';
    $form['actions']['submit']['#submit'][] = 'nfafmis_node_offer_license_form_submit';
  }

  // Set default sub-area-id when adding Inventory/Harvest content.
  if ($form_id == 'node_inventory_form' || $form_id == 'node_thinning_harvest_details_form') {
    $query_params = $nfafmis_service_utility->getQueryParams();
    if (!empty($query_params) && isset($query_params['sub_area_id'])) {
      $form['field_sub_area_id']['widget'][0]['#disabled'] = TRUE;
      $sub_area_id = $query_params['sub_area_id'];
      $sub_area_data = \Drupal::entityTypeManager()->getStorage('node')->load($sub_area_id);
      $form['field_sub_area_id']['widget'][0]['target_id']['#default_value'] = $sub_area_data;
    }
  }

  if ($form_id == 'node_charge_form' || $form_id == 'node_charge_edit_form') {
    $query_params = $nfafmis_service_utility->getQueryParams();
    if (!empty($query_params) && isset($query_params['offer_licence_id'])) {
      $form['field_areas_id']['widget'][0]['#disabled'] = TRUE;
      $area_id = $query_params['offer_licence_id'];
      $area_data = \Drupal::entityTypeManager()->getStorage('node')->load($area_id);
      $form['field_areas_id']['widget'][0]['target_id']['#default_value'] = $area_data;

      $sub_areas = $nfafmis_service_farmer->getSubAreasIds($area_id);
      // Provide area-id as agrumet to get sub-area ids.
      if ($sub_areas) {
        $form['field_charges_sub_area']['widget'][0]['target_id']['#selection_settings']['view']['arguments'][] = $query_params['offer_licence_id'];
      }
      // Disabled field since there is no sub-area-is available.
      else {
        $form['field_charges_sub_area']['widget'][0]['target_id']['#placeholder'] = t('No sub-area found.');
        $form['field_charges_sub_area']['widget'][0]['#disabled'] = TRUE;
      }
    }

    if (!empty($query_params) && isset($query_params['farmer_id'])) {
      // Provide farmer id as arguments to the reference views to filter result.
      // This only works when widget is selected as autocompleted.
      $form['field_areas_id']['widget'][0]['target_id']['#selection_settings']['view']['arguments'][] = $query_params['farmer_id'];
    }

    $form['actions']['submit']['#submit'][] = 'nfafmis_node_charge_form_submit';
  }

  if ($form_id == 'node_sub_area_form' || $form_id == 'node_sub_area_edit_form') {
    $offer_license_id = $nfafmis_service_utility->getQueryParams();
    // Provide farmer id as arguments to the reference views to filter result.
    // This only works when widget is selected as autocompleted.
    if ($offer_license_id) {
      $form['field_areas_id']['widget'][0]['target_id']['#selection_settings']['view']['arguments'][] = $offer_license_id['offer_licence_id'];
    }

    $form['field_date_harvested']['#states'] = [
      'visible' => [
        ':input[name="field_area_harvested[value]"]' => ['checked' => TRUE],
      ],
    ];
  }

  if ($form_id == 'node_invoice_form' || $form_id == 'node_invoice_edit_form') {
    // Set default farmer when adding offer license content.
    $form['field_invoice_number']['widget'][0]['#disabled'] = TRUE;
    $form['field_invoice_date']['widget'][0]['#disabled'] = TRUE;
    $form['field_amount']['widget'][0]['#disabled'] = TRUE;

    $query_params = $nfafmis_service_utility->getQueryParams();
    if (!empty($query_params['farmer_id'])) {
      $farmer = \Drupal::entityTypeManager()->getStorage('node')->load($query_params['farmer_id']);
      $form['field_farmer_name_ref']['widget'][0]['target_id']['#default_value'] = $farmer;

      // Hide farmer field and info instead.
      $form['field_farmer_name_ref']['#access'] = FALSE;
      $form_object = $form_state->getFormObject();
      $entity = $form_object->getEntity();

      // Set default value for invoice number dynamic if not already set.
      if ($entity->isNew()) {
        $form['field_invoice_number']['widget'][0]['value']['#default_value'] = 'I' . time();
      }

      // Hide amount field based on field_invoice_details.
      $form['field_amount']['#states'] = [
        'visible' => [
          [
            [':input[name="field_invoice_details"]' => ['value' => '1']],
            'or',
            [':input[name="field_invoice_details"]' => ['value' => '2']],
          ],
        ],
      ];

      // Create farmer info field container:
      $form['farmer_info'] = [
        '#type' => "container",
        '#theme' => 'section__farmer_infomation',
        '#farmer_data' => [
          'name' => $farmer->get('title')->value,
          'field_email' => $farmer->get('field_email')->value,
          'field_phone_number' => $farmer->get('field_phone_number')->value,
          'field_physical_address' => $farmer->get('field_physical_address')->value,
          'field_postal_address' => $farmer->get('field_postal_address')->value,
          'field_tax_identification_number' => $farmer->get('field_tax_identification_number')->value,
          'field_national_identification_no' => $farmer->get('field_national_identification_no')->value,
        ],
      ];
      $form['area_info'] = [
        '#type' => "container",
        '#theme' => 'section__area_infomation',
        '#weight' => 20,
        '#area_data' => [
          'area/001' => ['data' => []],
        ],
      ];
      $form['#fieldgroups']['group_tree_farmer_details']->children[] = 'farmer_info';
      $form['#fieldgroups']['group_invoice_details']->children[] = 'area_info';
      $form['area_info']['#ajax'] = [
        'callback' => 'ref_number_dropdown_callback',
        'wrapper' => 'ref_number_list',
        'event' => 'change',
        'method' => 'replace',
        'effect' => 'fade',
      ];
    }
    else {
      // Set error message if farmer id not availble in the param.
    }
  }

}

/**
 * Implements hook_views_pre_render().
 */
function nfafmis_views_pre_render(ViewExecutable $view) {
  $view->element['#attached']['library'][] = 'nfafmis/nfafmis';
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function nfafmis_preprocess_views_view_field(&$variables) {
  // Create nfafmis service object.
  $nfafmis_service_farmer = \Drupal::service('nfafmis_service.farmer');

  $view = $variables['view'];
  $field = $variables['field'];
  $row = $variables['row'];
  if ($view->storage->id() == 'sub_areas_planting_status' && $view->current_display == 'block_1') {
    $field_overall_area_allocated = $row->_entity->get('field_overall_area_allocated')->value;
    $area_panted_values = $nfafmis_service_farmer->getAreaPlantedUnPlantedValue($row->nid);

    // Override the view rewult.
    if ($field->field == 'field_offer_id') {
      $variables['output'] = $area_panted_values . 'ha';
    }
    if ($field->field == 'title') {
      $variables['output'] = $field_overall_area_allocated - $area_panted_values . 'ha';
    }
  }

  // Preprocess views view field_purpose to show AREA/XXXXXXXX Tab.
  if ($view->storage->id() == 'accounts_tab' && $view->current_display == 'block_1') {
    $farmer_id = $view->args[0];
    $offer_licence_id = $row->nid;
    if ($field->field == 'field_purpose') {
      $variables['output'] = $nfafmis_service_farmer->getLandRentAndOtherData($farmer_id, $offer_licence_id);;
    }
  }
  // Preprocess views view field_physical_address to show SUMARY-CHARGES Tab.
  if ($view->storage->id() == 'farmer_main_tab' && $view->current_display == 'page_6') {
    $farmer_id = $row->nid;
    if ($field->field == 'field_physical_address') {
      $variables['output'] = $nfafmis_service_farmer->getSummaryChargesData($farmer_id);
    }
    // Preprocess views view field_postal_address to show PAYMENTS Tab.
    if ($field->field == 'field_postal_address') {
      $variables['output'] = $nfafmis_service_farmer->getPaymentsData($farmer_id);
    }
  }
}

/**
 * Implements hook_preprocess_views_pre_view().
 */
function nfafmis_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  // Create nfafmis service object.
  $nfafmis_service_farmer = \Drupal::service('nfafmis_service.farmer');

  // Set Offer license IDs as view arguments.
  if ($view->id() == 'sub_areas_planting_status' &&
    ($display_id == 'block_4' || $display_id == 'block_6' || $display_id == 'block_8')) {
    // We have pass farmer Id intentionaly to get offer license ID from that.
    if (!empty($args)) {
      $offer_license_ids = $nfafmis_service_farmer->getOfferLicenseIds($args[0]);
      if ($offer_license_ids) {
        $args = [$offer_license_ids];
      }
    }
  }
  // Set argument for Inventroy.
  if ($view->id() == 'sub_areas_planting_status' &&
   ($display_id == 'block_2' || $display_id == 'block_3')) {
    // We have pass farmer Id intentionaly to get offer license ID from that.
    if (!empty($args)) {
      $offer_license_ids = $nfafmis_service_farmer->getOfferLicenseIds($args[0]);
      // Now get all sub-area ids based on area(offer license).
      if ($offer_license_ids) {
        $sub_areas_ids = $nfafmis_service_farmer->getSubAreasIds($offer_license_ids);
        // Pass sub-area ids to get Inventory.
        if ($sub_areas_ids) {
          $args = [$sub_areas_ids];
        }
      }
    }
  }
  // Set default value for filter.
  if ($view->id() == 'admin_land_rent_rates' && $display_id == 'page') {
    if (empty($view->getExposedInput()) || $view->getExposedInput()['field_rate_year_value'] == '') {
      $date = date('Y') - 1;
      $exposed_filters = ['field_rate_year_value' => $date];
      $view->setExposedInput($exposed_filters);
    }
  }
}

/**
 * Implements hook_theme().
 */
function nfafmis_theme($existing, $type, $theme, $path) {
  return [
    'tab__accounts__land_rent_other_data' => [
      'variables' => [
        'data' => NULL,
      ],
      'template' => 'tab/accounts/tab--accounts--land-rent-other-data'
    ],
    'tab__accounts__summary_charges_data' => [
      'variables' => [
        'data' => NULL,
      ],
      'template' => 'tab/accounts/tab--accounts--summary-charges-data'
    ],
    'tab__accounts__payments_data' => [
      'variables' => [
        'data' => NULL,
      ],
      'template' => 'tab/accounts/tab--accounts--payments-data'
    ],
    'section__farmer_infomation' => [
      'variables' => [
        'farmer_data' => NULL,
      ],
      'template' => 'sections/section--farmer-infomation'
    ],
    'section__area_info' => [
      'variables' => [
        'area_data' => NULL,
      ],
      'template' => 'sections/section--area-infomation'
    ],
  ];
}

/**
 * Submit handler for commnet form.
 */
function nfafmis_comment_comment_form_submit($form, FormStateInterface &$form_state) {
  $url = Url::fromUri('internal:/tree-farmer-overview');
  $form_state->setRedirectUrl($url);
}

/**
 * Validate handler for node_offer_license form.
 */
function nfafmis_node_offer_license_form_validate($form, FormStateInterface &$form_state) {
  $field_overall_area_allocated = $form_state->getValue('field_overall_area_allocated');
  if (isset($field_overall_area_allocated[0]['value'])) {
    $value = $field_overall_area_allocated[0]['value'];
    if (!is_numeric($value) || $value == 0) {
      $form_state->setErrorByName('field_overall_area_allocated', t('Value must numeric and greater than zero.'));
    }
  }
}

/**
 * Submit handler for node_offer_license form.
 */
function nfafmis_node_offer_license_form_submit($form, FormStateInterface &$form_state) {
  $url = Url::fromUri('internal:/tree-farmer-overview/licences');
  $response_data = $nfafmis_service_utility->getReffererAndQueryParams();
  if (!empty($response_data)) {
    if (isset($response_data['alias'])) {
      $url = Url::fromUri('internal:' . $response_data['alias']);
    }
  }
  $form_state->setRedirectUrl($url);
}

/**
 * Submit handler for node_charge form.
 */
function nfafmis_node_charge_form_submit($form, FormStateInterface &$form_state) {
  $url = Url::fromUri('internal:/tree-farmer-overview/accounts');
  $form_state->setRedirectUrl($url);
}

/**
 * Implements hook_field_field_area_id_compute().
 */
function computed_field_field_area_id_compute($entity_type_manager, $entity, $fields, $delta) {
  $value = 'AREA/' . time();
  return $value;
}

/**
 * Implements hook_field_field_amount_due_compute().
 */
function computed_field_field_amount_due_compute($entity_type_manager, $entity, $fields, $delta) {
  $value = ($entity->field_assessment_amount->value - $entity->field_amount_paid_as->value);
  return $value;
}

/**
 * Implements hook_token_info_alter().
 *
 * This adds the missing token info for automatically detected tokens.
 */
function nfafmis_token_info_alter(&$info) {
  $entities = \Drupal::service('entity_field.manager')->getFieldMap();
  foreach ($entities as $entity_key => $entity) {
    if ($entity_key !== 'node') {
      continue;
    }

    foreach ($entity as $field_key => $field) {
      if ($field['type'] !== 'yearonly') {
        continue;
      }

      $token_key = sprintf('node-%s', $field_key);
      $info['tokens'][$token_key]['value'] = [
        'name' => t('Year Only'),
        'description' => t('Year only value.'),
      ];
    }
  }
}
