<?php

/**
 * @file
 * Custom module.
 */

use Drupal\Core\Url;
use Drupal\views\ViewExecutable;
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\HttpFoundation\Request;

/**
 * Implements hook_form_alter().
 */
function nfafmis_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'comment_comment_form') {
    $form['actions']['submit']['#submit'][] = 'nfafmis_comment_comment_form_submit';
  }

  // Hide exposed form from certain page only.
  if ($form_id == 'views_exposed_form') {
    $include_id = [
      'views-exposed-form-farmer-filter-block-1',
      'views-exposed-form-farmer-main-tab-page-4',
      'views-exposed-form-farmer-main-tab-page-5',
      'views-exposed-form-farmer-main-tab-page-6',
      'views-exposed-form-farmer-main-tab-page-7'
    ];
    if (in_array($form['#id'], $include_id)) {
      $form['#attributes']['class'] = ['hidden'];
    }
  }

  if ($form_id == 'node_offer_license_form' || $form_id == 'node_offer_license__edit_form') {
    $form['field_license_id']['#states'] = [
      'visible' => [
        ':input[name="field_license_issued[value]"]' => ['checked' => TRUE],
      ],
    ];
    $form['field_license_date']['#states'] = [
      'visible' => [
        ':input[name="field_license_issued[value]"]' => ['checked' => TRUE],
      ],
    ];

    // Set default farmer when adding offer license content.
    $form['field_farmer_name_ref']['widget'][0]['#disabled'] = TRUE;
    if ($form_id == 'node_offer_license_form') {
      $query_params = getOfferLicenseDetails();
      if (!empty($query_params) && isset($query_params['farmer_id'])) {
        $farmer_id = $query_params['farmer_id'];
        $farmer_data = \Drupal::entityTypeManager()->getStorage('node')->load($farmer_id);
        $form['field_farmer_name_ref']['widget'][0]['target_id']['#default_value'] = $farmer_data;
      }
    }
    $form['actions']['submit']['#submit'][] = 'nfafmis_node_offer_license_form_submit';
  }

  // Set default sub-area-id when adding Inventory/Harvest content.
  if ($form_id == 'node_inventory_form' || $form_id == 'node_thinning_harvest_details_form') {
    $query_params = getOfferLicenseDetails();
    if (!empty($query_params) && isset($query_params['sub_area_id'])) {
      $form['field_sub_area_id']['widget'][0]['#disabled'] = TRUE;
      $sub_area_id = $query_params['sub_area_id'];
      $sub_area_data = \Drupal::entityTypeManager()->getStorage('node')->load($sub_area_id);
      $form['field_sub_area_id']['widget'][0]['target_id']['#default_value'] = $sub_area_data;
    }
  }

  if ($form_id == 'node_charge_form' || $form_id == 'node_charge_edit_form') {
    $form['actions']['submit']['#submit'][] = 'nfafmis_node_charge_form_submit';
  }

  if ($form_id == 'node_sub_area_form' || $form_id == 'node_sub_area_edit_form') {
    $offer_license_id = getOfferLicenseDetails();
    // Provide farmer id as arguments to the reference views to filter result.
    // This only works when widget is selected as autocompleted.
    if ($offer_license_id) {
      $form['field_areas_id']['widget'][0]['target_id']['#selection_settings']['view']['arguments'][] = $offer_license_id['offer_licence_id'];
    }

    $form['field_date_harvested']['#states'] = [
      'visible' => [
        ':input[name="field_area_harvested[value]"]' => ['checked' => TRUE],
      ],
    ];
  }
}

/**
 * Implements hook_views_pre_render().
 */
function nfafmis_views_pre_render(ViewExecutable $view) {
  $view->element['#attached']['library'][] = 'nfafmis/nfafmis';
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function nfafmis_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];
  $field = $variables['field'];
  $row = $variables['row'];
  if ($view->storage->id() == 'sub_areas_planting_status' && $view->current_display == 'block_1') {
    $field_overall_area_allocated = $row->_entity->get('field_overall_area_allocated')->value;
    $area_panted_values = getAreaPlantedUnPlantedValute($row->nid);

    // Override the view rewult.
    if ($field->field == 'field_offer_id') {
      $variables['output'] = $field_overall_area_allocated . 'ha';
    }
    if ($field->field == 'title') {
      $variables['output'] = $field_overall_area_allocated - $area_panted_values . 'ha';
    }
  }
}


function nfafmis_views_pre_view(ViewExecutable $view, $display_id, array &$args) {

  // Set Offer license IDs as view arguments.
  if ($view->id() == 'sub_areas_planting_status' &&
    ($display_id == 'block_4' || $display_id == 'block_6' || $display_id == 'block_8')) {
    // We have pass farmer Id intentionaly to get offer license ID from that.
    if (!empty($args)) {
      $offer_license_ids = getOfferLicenseIds($args[0]);
      if ($offer_license_ids) {
        $args = [$offer_license_ids];
      }
    }
  }
  // Set argument for Inventroy.
  if ($view->id() == 'sub_areas_planting_status' &&
   ($display_id == 'block_2' || $display_id == 'block_3')) {
    // We have pass farmer Id intentionaly to get offer license ID from that.
    if (!empty($args)) {
      $offer_license_ids = getOfferLicenseIds($args[0]);
      // Now get all sub-area ids based on area(offer license).
      if ($offer_license_ids) {
        $sub_areas_ids = getSubAreasIds($offer_license_ids);
        // Pass sub-area ids to get Inventory.
        if ($sub_areas_ids) {
          $args = [$sub_areas_ids];
        }
      }
    }
  }
}

/**
 * Submit handler for commnet form.
 */
function nfafmis_comment_comment_form_submit($form, FormStateInterface &$form_state) {
  $url = Url::fromUri('internal:/tree-farmer-overview');
  $form_state->setRedirectUrl($url);
}

/**
 * Submit handler for node_offer_license form.
 */
function nfafmis_node_offer_license_form_submit($form, FormStateInterface &$form_state){
  $url = Url::fromUri('internal:/tree-farmer-overview/licences');
  $response_data = getReffererAndQueryParams();
  if (!empty($response_data)) {
    if (isset($response_data['alias'])) {
      $url = Url::fromUri('internal:'. $response_data['alias']);
    }
  }
  $form_state->setRedirectUrl($url);
}

/**
 * Submit handler for node_charge form.
 */
function nfafmis_node_charge_form_submit($form, FormStateInterface &$form_state){
  $url = Url::fromUri('internal:/tree-farmer-overview/accounts');
  $form_state->setRedirectUrl($url);
}

/**
 * Implements computed_field_field_area_id_compute().
 */
function computed_field_field_area_id_compute($entity_type_manager, $entity, $fields, $delta) {
  $value = 'AREA/'. time();
  return $value;
}

/**
 * Get offer license ID.
 */
function getOfferLicenseDetails() {
  $response_data = getReffererAndQueryParams();
  if (!empty($response_data)) {
    if (isset($response_data['query_params'])) {
      return $response_data['query_params'];
    }
  }
  return NULL;
}

/**
 * Get offer license IDs based on farmer id.
 */
function getOfferLicenseIds($farmer_id) {
  $query = \Drupal::entityTypeManager()->getStorage('node')->getQuery();
  $nids = $query->condition('type', 'offer_license')
  ->condition('field_farmer_name_ref.target_id', $farmer_id)
  ->execute();
  if (!empty($nids)) {
    $nids = array_values($nids);
    return implode(',', $nids);
  }
  return NULL;
}

/**
 * Get offer license IDs based on farmer id.
 */
function getSubAreasIds($offer_licence_ids) {
  $offer_licence_ids = explode(',', $offer_licence_ids);
  $query = \Drupal::entityTypeManager()->getStorage('node')->getQuery();
  $sub_area_nids = $query->condition('type', 'sub_area')
  ->condition('field_areas_id.target_id', $offer_licence_ids, 'IN')
  ->execute();
  if (!empty($sub_area_nids)) {
    $sub_area_nids = array_values($sub_area_nids);
    return implode(',', $sub_area_nids);
  }
  return NULL;
}

/**
 * Get getAreaPlantedUnPlantedValute value  based on $offer_license_id.
 */
function getAreaPlantedUnPlantedValute($offer_license_id) {
  // Get sub-area entity Ids based on area ID.
  $query = \Drupal::entityTypeManager()->getStorage('node')->getQuery();
  $nids = $query->condition('type', 'sub_area')
  ->condition('field_areas_id.target_id', $offer_license_id)
  ->execute();
  if (!empty($nids)) {
    $nids = array_values($nids);
    $field_sub_area_planted = 0;
    $sub_areas = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($nids);
    foreach ($sub_areas as $key => $area) {
      $field_sub_area_planted += $area->get('field_sub_area_planted')->value;
    }
    return $field_sub_area_planted;
  }
  return 0;
}

function getReffererAndQueryParams() {
    // Getting the referer.
  $request = \Drupal::request();
  $referer = $request->headers->get('referer');
  // Getting the base url.
  $base_url = Request::createFromGlobals()->getSchemeAndHttpHost();
  // Getting the alias or the relative path.
  $alias = substr($referer, strlen($base_url));

  // All query params.
  $query_params = $request->query->all();

  $ref_param['query_params'] = !empty($query_params) ? $query_params : NULL;
  $ref_param['alias'] = $alias ? $alias : NULL;

  return $ref_param;
}
